// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  userName      String?      @unique
  email         String       @unique
  roles         String?      @default("user")
  isBlocked      Boolean?    @default(false)
  password      String
  emailVerified DateTime?
  phoneNo       String?
  image         String?      @default("default.png")
  referralCode  String?      @unique
  referredBy    String?
  accounts      Account[]
  sessions      Session[]
  kyc           Kyc[]
  userWallet    userWallet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String
  expires DateTime
}

model Kyc {
  id               String    @id @default(cuid())
  userid            String    @unique // Foreign key for User's email
  FullName         String
  country          String
  IDNO             String
  documentURL1     String
  documentURL2     String
  Status           String
  Rejection_reason String?
  createdAt        DateTime  @default(now())
  Reviewed_at      DateTime?

  user User @relation(fields: [userid], references: [id], onDelete: Cascade) // Relating user_id with User's id
}

model userWallet {
  id             String   @id @default(cuid())
  userid          String   @unique // Foreign key for User's id
  walletAddress  String?  @unique
  walletAddress2 String?  @unique
  walletAddress3 String?  @unique
  walletAddress4 String?  @unique
  walletAddress5 String?  @unique
  walletAddress6 String?  @unique
  walletAddress7 String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userid], references: [id], onDelete: Cascade) // Relating user_id with User's id
}
