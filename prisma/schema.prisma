generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  createdAt     DateTime       @default(now())
  emailVerified DateTime?
  image         String?        @default("default.png")
  updatedAt     DateTime       @updatedAt
  password      String
  referralCode  String?        @unique
  referredBy    String?
  phoneNo       String?
  name          String?
  userName      String?        @unique
  roles         String?        @default("user")
  isBlocked     Boolean?       @default(false)
  accounts      Account[]
  kyc           Kyc?
  Notification  Notification[]
  sessions      Session[]
  Transaction   Transaction[]
  userWallet    userWallet?
  wallets       wallets[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  token   String
  expires DateTime
  email   String   @unique
  id      String   @id @default(cuid())
}

model Kyc {
  id               String    @id @default(cuid())
  FullName         String
  country          String
  IDNO             String
  Status           String
  Rejection_reason String?
  createdAt        DateTime  @default(now())
  Reviewed_at      DateTime?
  documentURL1     String
  documentURL2     String
  userid           String    @unique
  user             User      @relation(fields: [userid], references: [id], onDelete: Cascade)
}

model userWallet {
  id             String   @id @default(cuid())
  walletAddress  String?  @unique
  walletAddress2 String?  @unique
  walletAddress3 String?  @unique
  walletAddress4 String?  @unique
  walletAddress5 String?  @unique
  walletAddress6 String?  @unique
  walletAddress7 String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userid         String   @unique
  user           User     @relation(fields: [userid], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id                    String   @id
  transactionId         String   @unique
  senderWalletAddress   String
  receiverWalletAddress String
  transactionHash       String
  userId                String
  transactionType       String
  amount                Float
  status                String
  createdAt             DateTime @default(now())
  coin                  String
  fee                   String
  orderId               String
  price                 String
  qty                   Int
  User                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model wallets {
  id            String   @id
  user_id       String
  address       String   @unique
  private_key   String
  mnemonic      String
  network       String
  created_at    DateTime @default(now())
  encrypted_key String?
  User          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
